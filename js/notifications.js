// ÈÄöÁü•ÁÆ°ÁêÜ

let notificationCount = 0;

// ÈÄöÁü•‰∏ÄË¶ß„ÅÆË™≠„ÅøËæº„Åø
async function loadNotifications() {
    try {
        const { data, error } = await supabase
            .from('notifications')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(50);

        if (error) throw error;

        appState.notifications = data || [];
        console.log('Ë™≠„ÅøËæº„Åæ„Çå„ÅüÈÄöÁü•:', appState.notifications);
        console.log('ÈÄöÁü•ID„ÅÆ‰æã:', appState.notifications.length > 0 ? appState.notifications[0].id : '„Å™„Åó');
        renderNotifications();
        updateNotificationBadge();
        
    } catch (error) {
        console.error('ÈÄöÁü•Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
    }
}

// ÈÄöÁü•„ÇíÊó¢Ë™≠„Å´„Åô„Çã
async function markNotificationAsRead(notificationId) {
    try {
        console.log('Êó¢Ë™≠„Å´„Åô„ÇãÈÄöÁü•ID:', notificationId);
        console.log('ÈÄöÁü•ID„ÅÆÂûã:', typeof notificationId);
        console.log('ÈÄöÁü•ID„ÅÆÈï∑„Åï:', notificationId ? notificationId.length : 'null');
        
        // ÈÄöÁü•ID„ÅÆÊ§úË®º
        if (!notificationId) {
            throw new Error('ÈÄöÁü•ID„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
        }
        
        // ÁèæÂú®„ÅÆÈÄöÁü•„Éá„Éº„Çø„ÇíÁ¢∫Ë™ç
        const notification = appState.notifications.find(n => n.id === notificationId);
        console.log('ÂØæË±°ÈÄöÁü•:', notification);
        
        if (!notification) {
            throw new Error('ÊåáÂÆö„Åï„Çå„ÅüÈÄöÁü•„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
        }
        
        // ÈÄöÁü•ID„ÅÆÂΩ¢Âºè„ÇíÁ¢∫Ë™çÔºàUUIDÂΩ¢Âºè„ÅÆÂ†¥Âêà„ÅØ„Åù„ÅÆ„Åæ„Åæ‰ΩøÁî®Ôºâ
        console.log('ÈÄöÁü•IDÂΩ¢ÂºèÁ¢∫Ë™ç:', {
            id: notificationId,
            isUUID: /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(notificationId),
            hasPrefix: notificationId.startsWith('notification_')
        });
        
        // Supabase„ÅßÈÄöÁü•„ÇíÊó¢Ë™≠„Å´Êõ¥Êñ∞
        console.log('SupabaseÊõ¥Êñ∞ÈñãÂßã...');
        const { data, error } = await supabase
            .from('notifications')
            .update({ read: true })
            .eq('id', notificationId)
            .select();

        if (error) {
            console.error('SupabaseÊõ¥Êñ∞„Ç®„É©„Éº:', error);
            console.error('„Ç®„É©„ÉºË©≥Á¥∞:', {
                message: error.message,
                details: error.details,
                hint: error.hint,
                code: error.code
            });
            throw error;
        }
        
        console.log('SupabaseÊõ¥Êñ∞ÊàêÂäü:', data);

        // „É≠„Éº„Ç´„É´Áä∂ÊÖã„ÇíÊõ¥Êñ∞
        const notificationIndex = appState.notifications.findIndex(n => n.id === notificationId);
        if (notificationIndex !== -1) {
            appState.notifications[notificationIndex].read = true;
            console.log('„É≠„Éº„Ç´„É´Áä∂ÊÖãÊõ¥Êñ∞ÊàêÂäü');
        } else {
            console.warn('„É≠„Éº„Ç´„É´Áä∂ÊÖã„ÅßÈÄöÁü•„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
        }

        // Ë°®Á§∫„ÇíÊõ¥Êñ∞
        renderNotifications();
        updateNotificationBadge();

        console.log('ÈÄöÁü•„ÇíÊó¢Ë™≠„Å´„Åó„Åæ„Åó„Åü:', notificationId);
        showNotification('ÈÄöÁü•„ÇíÊó¢Ë™≠„Å´„Åó„Åæ„Åó„Åü', 'success');
        
    } catch (error) {
        console.error('ÈÄöÁü•Êó¢Ë™≠„Ç®„É©„Éº:', error);
        console.error('„Ç®„É©„Éº„Çπ„Çø„ÉÉ„ÇØ:', error.stack);
        showNotification(`ÈÄöÁü•„ÅÆÊó¢Ë™≠„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`, 'error');
    }
}

// „Åô„Åπ„Å¶„ÅÆÈÄöÁü•„ÇíÊó¢Ë™≠„Å´„Åô„Çã
async function markAllNotificationsAsRead() {
    try {
        // Êú™Ë™≠„ÅÆÈÄöÁü•„ÅÆ„Åø„ÇíÂèñÂæó
        const unreadNotifications = appState.notifications.filter(n => !n.read);
        console.log('Êú™Ë™≠ÈÄöÁü•Êï∞:', unreadNotifications.length);
        console.log('Êú™Ë™≠ÈÄöÁü•ID‰∏ÄË¶ß:', unreadNotifications.map(n => n.id));
        
        if (unreadNotifications.length === 0) {
            showNotification('Êó¢Ë™≠„Å´„Åô„ÇãÈÄöÁü•„Åå„ÅÇ„Çä„Åæ„Åõ„Çì', 'info');
            return;
        }

        // Supabase„Åß‰∏ÄÊã¨Êõ¥Êñ∞
        console.log('‰∏ÄÊã¨Êõ¥Êñ∞ÈñãÂßã...');
        const { data, error } = await supabase
            .from('notifications')
            .update({ read: true })
            .in('id', unreadNotifications.map(n => n.id))
            .select();

        if (error) {
            console.error('‰∏ÄÊã¨Êõ¥Êñ∞„Ç®„É©„Éº:', error);
            console.error('„Ç®„É©„ÉºË©≥Á¥∞:', {
                message: error.message,
                details: error.details,
                hint: error.hint,
                code: error.code
            });
            throw error;
        }
        
        console.log('‰∏ÄÊã¨Êõ¥Êñ∞ÊàêÂäü:', data);

        // „É≠„Éº„Ç´„É´Áä∂ÊÖã„ÇíÊõ¥Êñ∞
        appState.notifications.forEach(notification => {
            notification.read = true;
        });

        // Ë°®Á§∫„ÇíÊõ¥Êñ∞
        renderNotifications();
        updateNotificationBadge();

        console.log('„Åô„Åπ„Å¶„ÅÆÈÄöÁü•„ÇíÊó¢Ë™≠„Å´„Åó„Åæ„Åó„Åü');
        showNotification('„Åô„Åπ„Å¶„ÅÆÈÄöÁü•„ÇíÊó¢Ë™≠„Å´„Åó„Åæ„Åó„Åü', 'success');
        
    } catch (error) {
        console.error('ÈÄöÁü•‰∏ÄÊã¨Êó¢Ë™≠„Ç®„É©„Éº:', error);
        console.error('„Ç®„É©„Éº„Çπ„Çø„ÉÉ„ÇØ:', error.stack);
        showNotification(`ÈÄöÁü•„ÅÆÊó¢Ë™≠„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`, 'error');
    }
}

// ÈÄöÁü•„Éë„Éç„É´„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíË®≠ÂÆö
function setupNotificationEventListeners() {
    // „Åô„Åπ„Å¶Êó¢Ë™≠„Éú„Çø„É≥
    const markAllReadBtn = document.getElementById('mark-all-read-btn');
    if (markAllReadBtn) {
        markAllReadBtn.addEventListener('click', () => {
            markAllNotificationsAsRead();
        });
    }
}

// ÈÄöÁü•„ÅÆË°®Á§∫
function renderNotifications() {
    const container = document.getElementById('notification-list');
    
    if (appState.notifications.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: var(--text-secondary); padding: 2rem;">ÈÄöÁü•„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</p>';
        return;
    }

    container.innerHTML = appState.notifications.map(notification => {
        const timeAgo = getTimeAgo(new Date(notification.created_at));
        const isNew = !notification.read;
        
        return `
            <div class="notification-item ${isNew ? 'new' : ''}" data-notification-id="${notification.id}">
                <div class="notification-content">
                    <div class="notification-message">${getNotificationIcon(notification.type)} ${escapeHtml(notification.message)}</div>
                    <div class="time">${timeAgo}</div>
                </div>
                ${isNew ? '<div class="unread-indicator"></div>' : ''}
            </div>
        `;
    }).join('');
    
    // ÂêÑÈÄöÁü•„Ç¢„Ç§„ÉÜ„É†„Å´„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÇíËøΩÂä†
    container.querySelectorAll('.notification-item').forEach(item => {
        item.addEventListener('click', (e) => {
            e.preventDefault();
            const notificationId = item.getAttribute('data-notification-id');
            console.log('„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„ÅüÈÄöÁü•ID:', notificationId);
            if (notificationId) {
                markNotificationAsRead(notificationId);
            }
        });
    });
}

// ÈÄöÁü•„Ç¢„Ç§„Ç≥„É≥
function getNotificationIcon(type) {
    const icons = {
        task_created: '‚ú®',
        task_updated: 'üîÑ',
        task_deleted: 'üóëÔ∏è',
        brainstorm_idea_created: 'üß†',
        new_comment: 'üí¨',
        general: 'üì¢'
    };
    return icons[type] || icons.general;
}

// ÈÄöÁü•„Éê„ÉÉ„Ç∏Êõ¥Êñ∞
function updateNotificationBadge() {
    const unreadCount = appState.notifications.filter(n => !n.read).length;
    const badge = document.getElementById('notification-badge');
    
    if (unreadCount > 0) {
        badge.textContent = unreadCount > 99 ? '99+' : unreadCount;
        badge.classList.remove('hidden');
    } else {
        badge.classList.add('hidden');
    }
}

// ÈÄöÁü•‰ΩúÊàê
async function createNotification(notificationData) {
    try {
        const notification = {
            ...notificationData,
            created_by: appState.currentUser?.id || null
        };

        const { error } = await supabase
            .from('notifications')
            .insert([notification]);

        if (error) {
            console.error('ÈÄöÁü•‰ΩúÊàê„Ç®„É©„Éº:', error);
            // ÈÄöÁü•‰ΩúÊàê„Ç®„É©„Éº„ÅØ„Ç≥„É°„É≥„ÉàÊäïÁ®ø„ÇíÈòªÂÆ≥„Åó„Å™„ÅÑ
        }
        
    } catch (error) {
        console.error('ÈÄöÁü•‰ΩúÊàê„Ç®„É©„Éº:', error);
        // ÈÄöÁü•‰ΩúÊàê„Ç®„É©„Éº„ÅØ„Ç≥„É°„É≥„ÉàÊäïÁ®ø„ÇíÈòªÂÆ≥„Åó„Å™„ÅÑ
    }
}

// ÈÄöÁü•„ÇíÊó¢Ë™≠„Å´„Åô„Çã
async function markNotificationsAsRead() {
    try {
        const unreadIds = appState.notifications
            .filter(n => !n.read)
            .map(n => n.id);

        if (unreadIds.length === 0) return;

        const { error } = await supabase
            .from('notifications')
            .update({ read: true })
            .in('id', unreadIds);

        if (error) throw error;
        
    } catch (error) {
        console.error('Êó¢Ë™≠Êõ¥Êñ∞„Ç®„É©„Éº:', error);
    }
}

// ÈÄöÁü•„Éë„Éç„É´„ÅÆÈñãÈñâ
function toggleNotificationPanel() {
    const panel = document.getElementById('notification-panel');
    panel.classList.toggle('open');
    
    if (panel.classList.contains('open')) {
        markNotificationsAsRead();
    }
}

// „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºÔºàDOMContentLoadedÂæå„Å´ÁôªÈå≤„ÄÅÈáçË§áÈò≤Ê≠¢Ôºâ
document.addEventListener('DOMContentLoaded', () => {
    const notificationBell = document.getElementById('notification-bell');
    const closeNotifications = document.getElementById('close-notifications');
    
    if (notificationBell && !notificationBell.dataset.listenerAttached) {
        notificationBell.addEventListener('click', toggleNotificationPanel);
        notificationBell.dataset.listenerAttached = 'true';
    }
    
    if (closeNotifications && !closeNotifications.dataset.listenerAttached) {
        closeNotifications.addEventListener('click', () => {
            document.getElementById('notification-panel').classList.remove('open');
        });
        closeNotifications.dataset.listenerAttached = 'true';
    }
});

// „É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞„ÅÆ„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥
function subscribeToNotifications() {
    const channel = supabase
        .channel('notifications-changes')
        .on('postgres_changes',
            { event: 'INSERT', schema: 'public', table: 'notifications' },
            (payload) => {
                console.log('Êñ∞„Åó„ÅÑÈÄöÁü•:', payload);
                
                // Êñ∞„Åó„ÅÑÈÄöÁü•„Çí„É™„Çπ„Éà„Å´ËøΩÂä†
                appState.notifications.unshift(payload.new);
                renderNotifications();
                updateNotificationBadge();
                
                // „Éñ„É©„Ç¶„Ç∂ÈÄöÁü•„ÇíË°®Á§∫ÔºàË®±ÂèØ„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºâ
                if ('Notification' in window && Notification.permission === 'granted') {
                    new Notification('OEMÂïÜÂìÅ‰ºÅÁîªÁÆ°ÁêÜ', {
                        body: payload.new.message,
                        icon: 'üçΩÔ∏è'
                    });
                }
            }
        )
        .subscribe();

    appState.subscriptions.push(channel);
}

// „Éñ„É©„Ç¶„Ç∂ÈÄöÁü•„ÅÆË®±ÂèØ„Çí„É™„ÇØ„Ç®„Çπ„ÉàÔºà„É¶„Éº„Ç∂„Éº„Ç∏„Çß„Çπ„ÉÅ„É£„Éº„ÅåÂøÖË¶ÅÔºâ
function requestNotificationPermission() {
    // „É¶„Éº„Ç∂„Éº„Ç∏„Çß„Çπ„ÉÅ„É£„Éº„Å™„Åó„Åß„ÅØÈÄöÁü•Ë®±ÂèØ„ÇíË¶ÅÊ±Ç„Åß„Åç„Å™„ÅÑ„Åü„ÇÅ„ÄÅÂÆåÂÖ®„Å´„Çπ„Ç≠„ÉÉ„Éó
    console.log('ÈÄöÁü•Ë®±ÂèØË¶ÅÊ±Ç„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åï„Çå„Åæ„Åó„ÅüÔºà„É¶„Éº„Ç∂„Éº„Ç∏„Çß„Çπ„ÉÅ„É£„Éº„ÅåÂøÖË¶ÅÔºâ');
    return;
}

// „É¶„Éº„Ç∂„Éº„Ç∏„Çß„Çπ„ÉÅ„É£„Éº‰ªò„Åç„ÅßÈÄöÁü•Ë®±ÂèØ„ÇíË¶ÅÊ±Ç„Åô„ÇãÈñ¢Êï∞
function requestNotificationPermissionWithGesture() {
    if ('Notification' in window && Notification.permission === 'default') {
        Notification.requestPermission().then(permission => {
            if (permission === 'granted') {
                console.log('ÈÄöÁü•Ë®±ÂèØ„Åå‰ªò‰∏é„Åï„Çå„Åæ„Åó„Åü');
                hideNotificationPermissionButton();
            } else {
                console.log('ÈÄöÁü•Ë®±ÂèØ„ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü');
            }
        });
    }
}

// ÈÄöÁü•Ë®±ÂèØ„Éú„Çø„É≥„ÇíË°®Á§∫
function showNotificationPermissionButton() {
    const button = document.getElementById('notification-permission-btn');
    if (button && 'Notification' in window && Notification.permission === 'default') {
        button.style.display = 'inline-block';
    }
}

// ÈÄöÁü•Ë®±ÂèØ„Éú„Çø„É≥„ÇíÈùûË°®Á§∫
function hideNotificationPermissionButton() {
    const button = document.getElementById('notification-permission-btn');
    if (button) {
        button.style.display = 'none';
    }
}

// ÈÄöÁü•Ë®±ÂèØ„Éú„Çø„É≥„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
document.addEventListener('DOMContentLoaded', () => {
    const permissionBtn = document.getElementById('notification-permission-btn');
    if (permissionBtn && !permissionBtn.dataset.listenerAttached) {
        permissionBtn.addEventListener('click', () => {
            requestNotificationPermissionWithGesture();
        });
        permissionBtn.dataset.listenerAttached = 'true';
    }
    
    // ÈÄöÁü•Ë®±ÂèØ„Éú„Çø„É≥„ÅÆË°®Á§∫„ÉÅ„Çß„ÉÉ„ÇØ
    showNotificationPermissionButton();
});
